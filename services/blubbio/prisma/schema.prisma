datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  email           String          @unique
  password        String
  countryCode     String?
  country         String?
  pbUrl           String?         
  bannerUrl       String?          
  inputSettings   String?
  LastDisconnectedAt  DateTime?
  friendsAsUser    UserFriendship[] @relation("UserFriends")
  friendsAsFriend  UserFriendship[] @relation("FriendUsers")
  rating            Float            @default(1500)
  ratingDeviation   Float            @default(350)
  volatility        Float            @default(0.06)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  tokenBlacklists TokenBlacklist[]
  sprint          Sprint[]
  score           Score[]
  news          News[]
  passwordResetToken PasswordResetToken[]
  rankedGamesAsUser1  Ranked[]        @relation("User1Ranked")
  rankedGamesAsUser2  Ranked[]        @relation("User2Ranked")
}

model UserFriendship {
  userId     Int
  friendId   Int
  user       User @relation("UserFriends", fields: [userId], references: [id])
  friend     User @relation("FriendUsers", fields: [friendId], references: [id])

  @@id([userId, friendId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model News {
  id                  Int             @id @default(autoincrement())
  type                String
  rank                Int
  value               Int             
  createdAt           DateTime        @default(now())
  user                User            @relation(fields: [userId], references: [id])
  userId              Int
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  tokenJTI  String   @unique
  token     String
  expiresAt DateTime
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Sprint {
  id                  Int             @id @default(autoincrement())
  submittedAt         DateTime        @default(now())
  user                User            @relation(fields: [userId], references: [id])
  userId              Int            
  bpsGraph            String          @default("[]")
  bubblesCleared      Int             
  bubblesShot         Int                
  bubblesPerSecond    Float           
  gameDuration        Int             
  highestBubbleClear  Int             
  wallBounces         Int             
  wallBounceClears    Int             
  highestCombo        Int               
  bubbleClearToWin    Int             
  clear3              Int             @default(0)
  clear4              Int             @default(0)
  clear5              Int             @default(0)
  clear3wb            Int             @default(0)
  clear4wb            Int             @default(0)
  clear5wb            Int             @default(0)
  gameStateHistory    String          @default("[]")
}

model Score {
  id                  Int             @id @default(autoincrement())
  submittedAt         DateTime        @default(now())
  user                User            @relation(fields: [userId], references: [id])
  userId              Int            
  bpsGraph            String          @default("[]")
  bubblesCleared      Int             
  bubblesShot         Int                
  bubblesPerSecond    Float           
  gameDuration        Int             
  highestBubbleClear  Int             
  wallBounces         Int             
  wallBounceClears    Int             
  highestCombo        Int               
  bubbleClearToWin    Int             
  clear3              Int             @default(0)
  clear4              Int             @default(0)
  clear5              Int             @default(0)
  clear3wb            Int             @default(0)
  clear4wb            Int             @default(0)
  clear5wb            Int             @default(0)
}

model Ranked {
  id                   Int             @id @default(autoincrement())
  submittedAt          DateTime        @default(now())
  matchId              String
  firstTo              Int
  user1                User            @relation("User1Ranked", fields: [userId1], references: [id])
  userId1              Int
  user1Score           Int
  user1HasWon          Boolean
  user1EloDiff         Float
  user1Stats           String
  user2                User            @relation("User2Ranked", fields: [userId2], references: [id])
  userId2              Int
  user2Score           Int
  user2HasWon          Boolean
  user2EloDiff         Float
  user2Stats           String
}
